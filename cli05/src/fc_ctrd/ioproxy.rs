// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `service/ioproxy/ioproxy.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
/// NOTE(ckatsak): This is auto-generated.
// @@protoc_insertion_point(message:fc_ctrd.StateRequest)
pub struct StateRequest {
    // message fields
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(field:fc_ctrd.StateRequest.ID)
    pub ID: ::std::string::String,
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(field:fc_ctrd.StateRequest.ExecID)
    pub ExecID: ::std::string::String,
    // special fields
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(special_field:fc_ctrd.StateRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StateRequest {
    fn default() -> &'a StateRequest {
        <StateRequest as ::protobuf::Message>::default_instance()
    }
}

impl StateRequest {
    pub fn new() -> StateRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ID",
            |m: &StateRequest| { &m.ID },
            |m: &mut StateRequest| { &mut m.ID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ExecID",
            |m: &StateRequest| { &m.ExecID },
            |m: &mut StateRequest| { &mut m.ExecID },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StateRequest>(
            "StateRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StateRequest {
    const NAME: &'static str = "StateRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ID = is.read_string()?;
                },
                18 => {
                    self.ExecID = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.ID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ID);
        }
        if !self.ExecID.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ExecID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.ID.is_empty() {
            os.write_string(1, &self.ID)?;
        }
        if !self.ExecID.is_empty() {
            os.write_string(2, &self.ExecID)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StateRequest {
        StateRequest::new()
    }

    fn clear(&mut self) {
        self.ID.clear();
        self.ExecID.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StateRequest {
        static instance: StateRequest = StateRequest {
            ID: ::std::string::String::new(),
            ExecID: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StateRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StateRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StateRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
/// NOTE(ckatsak): This is auto-generated.
// @@protoc_insertion_point(message:fc_ctrd.StateResponse)
pub struct StateResponse {
    // message fields
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(field:fc_ctrd.StateResponse.IsOpen)
    pub IsOpen: bool,
    // special fields
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(special_field:fc_ctrd.StateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StateResponse {
    fn default() -> &'a StateResponse {
        <StateResponse as ::protobuf::Message>::default_instance()
    }
}

impl StateResponse {
    pub fn new() -> StateResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "IsOpen",
            |m: &StateResponse| { &m.IsOpen },
            |m: &mut StateResponse| { &mut m.IsOpen },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StateResponse>(
            "StateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StateResponse {
    const NAME: &'static str = "StateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.IsOpen = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.IsOpen != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.IsOpen != false {
            os.write_bool(1, self.IsOpen)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StateResponse {
        StateResponse::new()
    }

    fn clear(&mut self) {
        self.IsOpen = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StateResponse {
        static instance: StateResponse = StateResponse {
            IsOpen: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
/// NOTE(ckatsak): This is auto-generated.
// @@protoc_insertion_point(message:fc_ctrd.AttachRequest)
pub struct AttachRequest {
    // message fields
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(field:fc_ctrd.AttachRequest.ID)
    pub ID: ::std::string::String,
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(field:fc_ctrd.AttachRequest.ExecID)
    pub ExecID: ::std::string::String,
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(field:fc_ctrd.AttachRequest.StdinPort)
    pub StdinPort: u32,
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(field:fc_ctrd.AttachRequest.StdoutPort)
    pub StdoutPort: u32,
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(field:fc_ctrd.AttachRequest.StderrPort)
    pub StderrPort: u32,
    // special fields
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(special_field:fc_ctrd.AttachRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AttachRequest {
    fn default() -> &'a AttachRequest {
        <AttachRequest as ::protobuf::Message>::default_instance()
    }
}

impl AttachRequest {
    pub fn new() -> AttachRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ID",
            |m: &AttachRequest| { &m.ID },
            |m: &mut AttachRequest| { &mut m.ID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ExecID",
            |m: &AttachRequest| { &m.ExecID },
            |m: &mut AttachRequest| { &mut m.ExecID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "StdinPort",
            |m: &AttachRequest| { &m.StdinPort },
            |m: &mut AttachRequest| { &mut m.StdinPort },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "StdoutPort",
            |m: &AttachRequest| { &m.StdoutPort },
            |m: &mut AttachRequest| { &mut m.StdoutPort },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "StderrPort",
            |m: &AttachRequest| { &m.StderrPort },
            |m: &mut AttachRequest| { &mut m.StderrPort },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AttachRequest>(
            "AttachRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AttachRequest {
    const NAME: &'static str = "AttachRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.ID = is.read_string()?;
                },
                18 => {
                    self.ExecID = is.read_string()?;
                },
                24 => {
                    self.StdinPort = is.read_uint32()?;
                },
                32 => {
                    self.StdoutPort = is.read_uint32()?;
                },
                40 => {
                    self.StderrPort = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.ID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ID);
        }
        if !self.ExecID.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ExecID);
        }
        if self.StdinPort != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.StdinPort);
        }
        if self.StdoutPort != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.StdoutPort);
        }
        if self.StderrPort != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.StderrPort);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.ID.is_empty() {
            os.write_string(1, &self.ID)?;
        }
        if !self.ExecID.is_empty() {
            os.write_string(2, &self.ExecID)?;
        }
        if self.StdinPort != 0 {
            os.write_uint32(3, self.StdinPort)?;
        }
        if self.StdoutPort != 0 {
            os.write_uint32(4, self.StdoutPort)?;
        }
        if self.StderrPort != 0 {
            os.write_uint32(5, self.StderrPort)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AttachRequest {
        AttachRequest::new()
    }

    fn clear(&mut self) {
        self.ID.clear();
        self.ExecID.clear();
        self.StdinPort = 0;
        self.StdoutPort = 0;
        self.StderrPort = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AttachRequest {
        static instance: AttachRequest = AttachRequest {
            ID: ::std::string::String::new(),
            ExecID: ::std::string::String::new(),
            StdinPort: 0,
            StdoutPort: 0,
            StderrPort: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AttachRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AttachRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AttachRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttachRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dservice/ioproxy/ioproxy.proto\x12\x07fc_ctrd\x1a\x1bgoogle/protobu\
    f/empty.proto\"6\n\x0cStateRequest\x12\x0e\n\x02ID\x18\x01\x20\x01(\tR\
    \x02ID\x12\x16\n\x06ExecID\x18\x02\x20\x01(\tR\x06ExecID\"'\n\rStateResp\
    onse\x12\x16\n\x06IsOpen\x18\x01\x20\x01(\x08R\x06IsOpen\"\x95\x01\n\rAt\
    tachRequest\x12\x0e\n\x02ID\x18\x01\x20\x01(\tR\x02ID\x12\x16\n\x06ExecI\
    D\x18\x02\x20\x01(\tR\x06ExecID\x12\x1c\n\tStdinPort\x18\x03\x20\x01(\rR\
    \tStdinPort\x12\x1e\n\nStdoutPort\x18\x04\x20\x01(\rR\nStdoutPort\x12\
    \x1e\n\nStderrPort\x18\x05\x20\x01(\rR\nStderrPort2{\n\x07IOProxy\x126\n\
    \x05State\x12\x15.fc_ctrd.StateRequest\x1a\x16.fc_ctrd.StateResponse\x12\
    8\n\x06Attach\x12\x16.fc_ctrd.AttachRequest\x1a\x16.google.protobuf.Empt\
    yB\tZ\x07ioproxyb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::empty::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(StateRequest::generated_message_descriptor_data());
            messages.push(StateResponse::generated_message_descriptor_data());
            messages.push(AttachRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
