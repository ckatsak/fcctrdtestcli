// This file is generated by ttrpc-compiler 0.6.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clipto_camel_casepy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
use protobuf::{CodedInputStream, CodedOutputStream, Message};
use std::collections::HashMap;
use std::sync::Arc;
use async_trait::async_trait;

#[derive(Clone)]
pub struct DriveMounterClient {
    client: ::ttrpc::r#async::Client,
}

impl DriveMounterClient {
    pub fn new(client: ::ttrpc::r#async::Client) -> Self {
        DriveMounterClient {
            client: client,
        }
    }

    pub async fn mount_drive(&self, ctx: ttrpc::context::Context, req: &super::drivemount::MountDriveRequest) -> ::ttrpc::Result<super::empty::Empty> {
        let mut cres = super::empty::Empty::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.DriveMounter", "MountDrive", cres);
    }

    pub async fn unmount_drive(&self, ctx: ttrpc::context::Context, req: &super::drivemount::UnmountDriveRequest) -> ::ttrpc::Result<super::empty::Empty> {
        let mut cres = super::empty::Empty::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.DriveMounter", "UnmountDrive", cres);
    }
}

struct MountDriveMethod {
    service: Arc<Box<dyn DriveMounter + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for MountDriveMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, drivemount, MountDriveRequest, mount_drive);
    }
}

struct UnmountDriveMethod {
    service: Arc<Box<dyn DriveMounter + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for UnmountDriveMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, drivemount, UnmountDriveRequest, unmount_drive);
    }
}

#[async_trait]
pub trait DriveMounter: Sync {
    async fn mount_drive(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::drivemount::MountDriveRequest) -> ::ttrpc::Result<super::empty::Empty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.DriveMounter/MountDrive is not supported".to_string())))
    }
    async fn unmount_drive(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::drivemount::UnmountDriveRequest) -> ::ttrpc::Result<super::empty::Empty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.DriveMounter/UnmountDrive is not supported".to_string())))
    }
}

pub fn create_drive_mounter(service: Arc<Box<dyn DriveMounter + Send + Sync>>) -> HashMap<String, ::ttrpc::r#async::Service> {
    let mut ret = HashMap::new();
    let mut methods = HashMap::new();
    let streams = HashMap::new();

    methods.insert("MountDrive".to_string(),
                    Box::new(MountDriveMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("UnmountDrive".to_string(),
                    Box::new(UnmountDriveMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    ret.insert("fc_ctrd.DriveMounter".to_string(), ::ttrpc::r#async::Service{ methods, streams });
    ret
}
