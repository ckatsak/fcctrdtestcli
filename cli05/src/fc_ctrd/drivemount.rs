// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `service/drivemount/drivemount.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
/// NOTE(ckatsak): This is auto-generated.
// @@protoc_insertion_point(message:fc_ctrd.MountDriveRequest)
pub struct MountDriveRequest {
    // message fields
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(field:fc_ctrd.MountDriveRequest.DriveID)
    pub DriveID: ::std::string::String,
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(field:fc_ctrd.MountDriveRequest.DestinationPath)
    pub DestinationPath: ::std::string::String,
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(field:fc_ctrd.MountDriveRequest.FilesytemType)
    pub FilesytemType: ::std::string::String,
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(field:fc_ctrd.MountDriveRequest.Options)
    pub Options: ::std::vec::Vec<::std::string::String>,
    // special fields
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(special_field:fc_ctrd.MountDriveRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MountDriveRequest {
    fn default() -> &'a MountDriveRequest {
        <MountDriveRequest as ::protobuf::Message>::default_instance()
    }
}

impl MountDriveRequest {
    pub fn new() -> MountDriveRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DriveID",
            |m: &MountDriveRequest| { &m.DriveID },
            |m: &mut MountDriveRequest| { &mut m.DriveID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DestinationPath",
            |m: &MountDriveRequest| { &m.DestinationPath },
            |m: &mut MountDriveRequest| { &mut m.DestinationPath },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "FilesytemType",
            |m: &MountDriveRequest| { &m.FilesytemType },
            |m: &mut MountDriveRequest| { &mut m.FilesytemType },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "Options",
            |m: &MountDriveRequest| { &m.Options },
            |m: &mut MountDriveRequest| { &mut m.Options },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MountDriveRequest>(
            "MountDriveRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MountDriveRequest {
    const NAME: &'static str = "MountDriveRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.DriveID = is.read_string()?;
                },
                18 => {
                    self.DestinationPath = is.read_string()?;
                },
                26 => {
                    self.FilesytemType = is.read_string()?;
                },
                34 => {
                    self.Options.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.DriveID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.DriveID);
        }
        if !self.DestinationPath.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.DestinationPath);
        }
        if !self.FilesytemType.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.FilesytemType);
        }
        for value in &self.Options {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.DriveID.is_empty() {
            os.write_string(1, &self.DriveID)?;
        }
        if !self.DestinationPath.is_empty() {
            os.write_string(2, &self.DestinationPath)?;
        }
        if !self.FilesytemType.is_empty() {
            os.write_string(3, &self.FilesytemType)?;
        }
        for v in &self.Options {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MountDriveRequest {
        MountDriveRequest::new()
    }

    fn clear(&mut self) {
        self.DriveID.clear();
        self.DestinationPath.clear();
        self.FilesytemType.clear();
        self.Options.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MountDriveRequest {
        static instance: MountDriveRequest = MountDriveRequest {
            DriveID: ::std::string::String::new(),
            DestinationPath: ::std::string::String::new(),
            FilesytemType: ::std::string::String::new(),
            Options: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MountDriveRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MountDriveRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MountDriveRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MountDriveRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
/// NOTE(ckatsak): This is auto-generated.
// @@protoc_insertion_point(message:fc_ctrd.UnmountDriveRequest)
pub struct UnmountDriveRequest {
    // message fields
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(field:fc_ctrd.UnmountDriveRequest.DriveID)
    pub DriveID: ::std::string::String,
    // special fields
    /// NOTE(ckatsak): This is auto-generated.
    // @@protoc_insertion_point(special_field:fc_ctrd.UnmountDriveRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnmountDriveRequest {
    fn default() -> &'a UnmountDriveRequest {
        <UnmountDriveRequest as ::protobuf::Message>::default_instance()
    }
}

impl UnmountDriveRequest {
    pub fn new() -> UnmountDriveRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "DriveID",
            |m: &UnmountDriveRequest| { &m.DriveID },
            |m: &mut UnmountDriveRequest| { &mut m.DriveID },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnmountDriveRequest>(
            "UnmountDriveRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnmountDriveRequest {
    const NAME: &'static str = "UnmountDriveRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.DriveID = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.DriveID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.DriveID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.DriveID.is_empty() {
            os.write_string(1, &self.DriveID)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnmountDriveRequest {
        UnmountDriveRequest::new()
    }

    fn clear(&mut self) {
        self.DriveID.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnmountDriveRequest {
        static instance: UnmountDriveRequest = UnmountDriveRequest {
            DriveID: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnmountDriveRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnmountDriveRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnmountDriveRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnmountDriveRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#service/drivemount/drivemount.proto\x12\x07fc_ctrd\x1a\x1bgoogle/prot\
    obuf/empty.proto\"\x97\x01\n\x11MountDriveRequest\x12\x18\n\x07DriveID\
    \x18\x01\x20\x01(\tR\x07DriveID\x12(\n\x0fDestinationPath\x18\x02\x20\
    \x01(\tR\x0fDestinationPath\x12$\n\rFilesytemType\x18\x03\x20\x01(\tR\rF\
    ilesytemType\x12\x18\n\x07Options\x18\x04\x20\x03(\tR\x07Options\"/\n\
    \x13UnmountDriveRequest\x12\x18\n\x07DriveID\x18\x01\x20\x01(\tR\x07Driv\
    eID2\x96\x01\n\x0cDriveMounter\x12@\n\nMountDrive\x12\x1a.fc_ctrd.MountD\
    riveRequest\x1a\x16.google.protobuf.Empty\x12D\n\x0cUnmountDrive\x12\x1c\
    .fc_ctrd.UnmountDriveRequest\x1a\x16.google.protobuf.EmptyB\x0cZ\ndrivem\
    ountb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::empty::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(MountDriveRequest::generated_message_descriptor_data());
            messages.push(UnmountDriveRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
