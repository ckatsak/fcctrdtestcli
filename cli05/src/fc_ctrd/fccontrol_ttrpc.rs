// This file is generated by ttrpc-compiler 0.6.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clipto_camel_casepy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
use protobuf::{CodedInputStream, CodedOutputStream, Message};
use std::collections::HashMap;
use std::sync::Arc;
use async_trait::async_trait;

#[derive(Clone)]
pub struct FirecrackerClient {
    client: ::ttrpc::r#async::Client,
}

impl FirecrackerClient {
    pub fn new(client: ::ttrpc::r#async::Client) -> Self {
        FirecrackerClient {
            client: client,
        }
    }

    pub async fn create_vm(&self, ctx: ttrpc::context::Context, req: &super::firecracker::CreateVMRequest) -> ::ttrpc::Result<super::firecracker::CreateVMResponse> {
        let mut cres = super::firecracker::CreateVMResponse::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.Firecracker", "CreateVM", cres);
    }

    pub async fn pause_vm(&self, ctx: ttrpc::context::Context, req: &super::firecracker::PauseVMRequest) -> ::ttrpc::Result<super::empty::Empty> {
        let mut cres = super::empty::Empty::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.Firecracker", "PauseVM", cres);
    }

    pub async fn resume_vm(&self, ctx: ttrpc::context::Context, req: &super::firecracker::ResumeVMRequest) -> ::ttrpc::Result<super::empty::Empty> {
        let mut cres = super::empty::Empty::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.Firecracker", "ResumeVM", cres);
    }

    pub async fn create_vm_snapshot(&self, ctx: ttrpc::context::Context, req: &super::firecracker::CreateVMSnapshotRequest) -> ::ttrpc::Result<super::empty::Empty> {
        let mut cres = super::empty::Empty::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.Firecracker", "CreateVMSnapshot", cres);
    }

    pub async fn load_vm_snapshot(&self, ctx: ttrpc::context::Context, req: &super::firecracker::LoadVMSnapshotRequest) -> ::ttrpc::Result<super::empty::Empty> {
        let mut cres = super::empty::Empty::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.Firecracker", "LoadVMSnapshot", cres);
    }

    pub async fn stop_vm(&self, ctx: ttrpc::context::Context, req: &super::firecracker::StopVMRequest) -> ::ttrpc::Result<super::empty::Empty> {
        let mut cres = super::empty::Empty::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.Firecracker", "StopVM", cres);
    }

    pub async fn get_vm_info(&self, ctx: ttrpc::context::Context, req: &super::firecracker::GetVMInfoRequest) -> ::ttrpc::Result<super::firecracker::GetVMInfoResponse> {
        let mut cres = super::firecracker::GetVMInfoResponse::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.Firecracker", "GetVMInfo", cres);
    }

    pub async fn set_vm_metadata(&self, ctx: ttrpc::context::Context, req: &super::firecracker::SetVMMetadataRequest) -> ::ttrpc::Result<super::empty::Empty> {
        let mut cres = super::empty::Empty::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.Firecracker", "SetVMMetadata", cres);
    }

    pub async fn update_vm_metadata(&self, ctx: ttrpc::context::Context, req: &super::firecracker::UpdateVMMetadataRequest) -> ::ttrpc::Result<super::empty::Empty> {
        let mut cres = super::empty::Empty::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.Firecracker", "UpdateVMMetadata", cres);
    }

    pub async fn get_vm_metadata(&self, ctx: ttrpc::context::Context, req: &super::firecracker::GetVMMetadataRequest) -> ::ttrpc::Result<super::firecracker::GetVMMetadataResponse> {
        let mut cres = super::firecracker::GetVMMetadataResponse::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.Firecracker", "GetVMMetadata", cres);
    }

    pub async fn get_balloon_config(&self, ctx: ttrpc::context::Context, req: &super::firecracker::GetBalloonConfigRequest) -> ::ttrpc::Result<super::firecracker::GetBalloonConfigResponse> {
        let mut cres = super::firecracker::GetBalloonConfigResponse::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.Firecracker", "GetBalloonConfig", cres);
    }

    pub async fn update_balloon(&self, ctx: ttrpc::context::Context, req: &super::firecracker::UpdateBalloonRequest) -> ::ttrpc::Result<super::empty::Empty> {
        let mut cres = super::empty::Empty::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.Firecracker", "UpdateBalloon", cres);
    }

    pub async fn get_balloon_stats(&self, ctx: ttrpc::context::Context, req: &super::firecracker::GetBalloonStatsRequest) -> ::ttrpc::Result<super::firecracker::GetBalloonStatsResponse> {
        let mut cres = super::firecracker::GetBalloonStatsResponse::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.Firecracker", "GetBalloonStats", cres);
    }

    pub async fn update_balloon_stats(&self, ctx: ttrpc::context::Context, req: &super::firecracker::UpdateBalloonStatsRequest) -> ::ttrpc::Result<super::empty::Empty> {
        let mut cres = super::empty::Empty::new();
        ::ttrpc::async_client_request!(self, ctx, req, "fc_ctrd.Firecracker", "UpdateBalloonStats", cres);
    }
}

struct CreateVmMethod {
    service: Arc<Box<dyn Firecracker + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for CreateVmMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, firecracker, CreateVMRequest, create_vm);
    }
}

struct PauseVmMethod {
    service: Arc<Box<dyn Firecracker + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for PauseVmMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, firecracker, PauseVMRequest, pause_vm);
    }
}

struct ResumeVmMethod {
    service: Arc<Box<dyn Firecracker + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for ResumeVmMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, firecracker, ResumeVMRequest, resume_vm);
    }
}

struct CreateVmSnapshotMethod {
    service: Arc<Box<dyn Firecracker + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for CreateVmSnapshotMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, firecracker, CreateVMSnapshotRequest, create_vm_snapshot);
    }
}

struct LoadVmSnapshotMethod {
    service: Arc<Box<dyn Firecracker + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for LoadVmSnapshotMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, firecracker, LoadVMSnapshotRequest, load_vm_snapshot);
    }
}

struct StopVmMethod {
    service: Arc<Box<dyn Firecracker + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for StopVmMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, firecracker, StopVMRequest, stop_vm);
    }
}

struct GetVmInfoMethod {
    service: Arc<Box<dyn Firecracker + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for GetVmInfoMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, firecracker, GetVMInfoRequest, get_vm_info);
    }
}

struct SetVmMetadataMethod {
    service: Arc<Box<dyn Firecracker + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for SetVmMetadataMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, firecracker, SetVMMetadataRequest, set_vm_metadata);
    }
}

struct UpdateVmMetadataMethod {
    service: Arc<Box<dyn Firecracker + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for UpdateVmMetadataMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, firecracker, UpdateVMMetadataRequest, update_vm_metadata);
    }
}

struct GetVmMetadataMethod {
    service: Arc<Box<dyn Firecracker + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for GetVmMetadataMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, firecracker, GetVMMetadataRequest, get_vm_metadata);
    }
}

struct GetBalloonConfigMethod {
    service: Arc<Box<dyn Firecracker + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for GetBalloonConfigMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, firecracker, GetBalloonConfigRequest, get_balloon_config);
    }
}

struct UpdateBalloonMethod {
    service: Arc<Box<dyn Firecracker + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for UpdateBalloonMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, firecracker, UpdateBalloonRequest, update_balloon);
    }
}

struct GetBalloonStatsMethod {
    service: Arc<Box<dyn Firecracker + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for GetBalloonStatsMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, firecracker, GetBalloonStatsRequest, get_balloon_stats);
    }
}

struct UpdateBalloonStatsMethod {
    service: Arc<Box<dyn Firecracker + Send + Sync>>,
}

#[async_trait]
impl ::ttrpc::r#async::MethodHandler for UpdateBalloonStatsMethod {
    async fn handler(&self, ctx: ::ttrpc::r#async::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<::ttrpc::Response> {
        ::ttrpc::async_request_handler!(self, ctx, req, firecracker, UpdateBalloonStatsRequest, update_balloon_stats);
    }
}

#[async_trait]
pub trait Firecracker: Sync {
    async fn create_vm(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::firecracker::CreateVMRequest) -> ::ttrpc::Result<super::firecracker::CreateVMResponse> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.Firecracker/CreateVM is not supported".to_string())))
    }
    async fn pause_vm(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::firecracker::PauseVMRequest) -> ::ttrpc::Result<super::empty::Empty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.Firecracker/PauseVM is not supported".to_string())))
    }
    async fn resume_vm(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::firecracker::ResumeVMRequest) -> ::ttrpc::Result<super::empty::Empty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.Firecracker/ResumeVM is not supported".to_string())))
    }
    async fn create_vm_snapshot(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::firecracker::CreateVMSnapshotRequest) -> ::ttrpc::Result<super::empty::Empty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.Firecracker/CreateVMSnapshot is not supported".to_string())))
    }
    async fn load_vm_snapshot(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::firecracker::LoadVMSnapshotRequest) -> ::ttrpc::Result<super::empty::Empty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.Firecracker/LoadVMSnapshot is not supported".to_string())))
    }
    async fn stop_vm(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::firecracker::StopVMRequest) -> ::ttrpc::Result<super::empty::Empty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.Firecracker/StopVM is not supported".to_string())))
    }
    async fn get_vm_info(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::firecracker::GetVMInfoRequest) -> ::ttrpc::Result<super::firecracker::GetVMInfoResponse> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.Firecracker/GetVMInfo is not supported".to_string())))
    }
    async fn set_vm_metadata(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::firecracker::SetVMMetadataRequest) -> ::ttrpc::Result<super::empty::Empty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.Firecracker/SetVMMetadata is not supported".to_string())))
    }
    async fn update_vm_metadata(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::firecracker::UpdateVMMetadataRequest) -> ::ttrpc::Result<super::empty::Empty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.Firecracker/UpdateVMMetadata is not supported".to_string())))
    }
    async fn get_vm_metadata(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::firecracker::GetVMMetadataRequest) -> ::ttrpc::Result<super::firecracker::GetVMMetadataResponse> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.Firecracker/GetVMMetadata is not supported".to_string())))
    }
    async fn get_balloon_config(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::firecracker::GetBalloonConfigRequest) -> ::ttrpc::Result<super::firecracker::GetBalloonConfigResponse> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.Firecracker/GetBalloonConfig is not supported".to_string())))
    }
    async fn update_balloon(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::firecracker::UpdateBalloonRequest) -> ::ttrpc::Result<super::empty::Empty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.Firecracker/UpdateBalloon is not supported".to_string())))
    }
    async fn get_balloon_stats(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::firecracker::GetBalloonStatsRequest) -> ::ttrpc::Result<super::firecracker::GetBalloonStatsResponse> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.Firecracker/GetBalloonStats is not supported".to_string())))
    }
    async fn update_balloon_stats(&self, _ctx: &::ttrpc::r#async::TtrpcContext, _: super::firecracker::UpdateBalloonStatsRequest) -> ::ttrpc::Result<super::empty::Empty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/fc_ctrd.Firecracker/UpdateBalloonStats is not supported".to_string())))
    }
}

pub fn create_firecracker(service: Arc<Box<dyn Firecracker + Send + Sync>>) -> HashMap<String, ::ttrpc::r#async::Service> {
    let mut ret = HashMap::new();
    let mut methods = HashMap::new();
    let streams = HashMap::new();

    methods.insert("CreateVM".to_string(),
                    Box::new(CreateVmMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("PauseVM".to_string(),
                    Box::new(PauseVmMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("ResumeVM".to_string(),
                    Box::new(ResumeVmMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("CreateVMSnapshot".to_string(),
                    Box::new(CreateVmSnapshotMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("LoadVMSnapshot".to_string(),
                    Box::new(LoadVmSnapshotMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("StopVM".to_string(),
                    Box::new(StopVmMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("GetVMInfo".to_string(),
                    Box::new(GetVmInfoMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("SetVMMetadata".to_string(),
                    Box::new(SetVmMetadataMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("UpdateVMMetadata".to_string(),
                    Box::new(UpdateVmMetadataMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("GetVMMetadata".to_string(),
                    Box::new(GetVmMetadataMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("GetBalloonConfig".to_string(),
                    Box::new(GetBalloonConfigMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("UpdateBalloon".to_string(),
                    Box::new(UpdateBalloonMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("GetBalloonStats".to_string(),
                    Box::new(GetBalloonStatsMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    methods.insert("UpdateBalloonStats".to_string(),
                    Box::new(UpdateBalloonStatsMethod{service: service.clone()}) as Box<dyn ::ttrpc::r#async::MethodHandler + Send + Sync>);

    ret.insert("fc_ctrd.Firecracker".to_string(), ::ttrpc::r#async::Service{ methods, streams });
    ret
}
